/*
 * -----------------------
 * ------ SMART APP ------
 * -----------------------
 *
 * STOP:  Do NOT PUBLISH the code to GitHub, it is a VIOLATION of the license terms.
 * You are NOT allowed share, distribute, reuse or publicly host (e.g. GITHUB) the code. Refer to the license details on our website.
 *
 */

/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() {
    return "01.04.00"
}

/**
*  Use a trigger to activate camera to take pictures, activate motion monitoring, turn on switches and send a notification
*
* Copyright RBoy Apps
* Change log:
* 2017-5-26 - (v 01.04.0) Added support for buttons and updated momentary as per the new specifications
* 2017-5-26 - (v 01.03.01) Multiple SMS numbers are now separate by a *
* 2016-11-5 - Added support for automatic code update notifications and fixed an issue with sms
* 2016-8-17 - Added support for ST contact address book and version
* 2015-12-30 - Added support for taking multiple pictures (burst) 0.5 seconds apart
* 2015-12-30 - Added support for taking a picture on acceleration
* 2015-12-23 - Added support to take a picture on the push of a momentary switch (e.g. door bell)
* 2015-7-22 - Added support to turn on switches and camera monitoring
* 2015-1-30 - Initial code
*/
definition(
    name: "Trigger based Camera Pictures and Actions",
    namespace: "rboy",
    author: "RBoy Apps",
    description: "Use a trigger (motion sensor, door sensor etc) to activate a camera to take pictures and turn on motion monitoring, switches and send a notification",
    category: "Safety & Security",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Categories/cameras.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Categories/cameras@2x.png"
)

preferences {
    section("Trigger based Camera Pictures and Actions v${clientVersion()}") {
    }
    section("Choose Trigger Events") {
        paragraph "Choose motion sensors and contact sensors which will trigger the actions in the next section"
        input "motionSensors", "capability.motionSensor", title: "If motion is detected...", multiple: true, required: false
        input "contactSensors", "capability.contactSensor", title: "If a contact is opened/closed...", multiple: true, required: false
        input "buttonSwitches", "capability.button", title: "If a button is pressed...", multiple: true, required: false
        input "momentarySwitches", "capability.momentary", title: "If a switch is pushed...", multiple: true, required: false
        input "accelerationSensors", "capability.accelerationSensor", title: "If acceleration detected here...", multiple: true, required: false
    }

    section("Choose Trigger Actions") {
        paragraph "Choose cameras and switches which will take pictures and turn on when events are triggered from the previous section"
        input "cameras", "capability.imageCapture", title: "...take pictures with these cameras", multiple: true, required: false
        input "burstCount", "number", title: "...how many pictures?", defaultValue:3
        input "cameraMonitoring", "bool", title: "...optionally turn on camera motion monitoring"
        input "switches", "capability.switch", title: "...turn on these switches", multiple: true, required: false
        input
    }

    section("Notification Options") {
        input("recipients", "contact", title: "Send notifications to (optional)", multiple: true, required: false) {
            paragraph "You can enter multiple phone numbers to send an SMS to by separating them with a '*'. E.g. 5551234567*4447654321"
            input name: "sms", title: "Send SMS notification to (optional):", type: "phone", required: false
            input "push", "bool", title: "Send Push Notification", required: false
        }
    }
    section() {
        label title: "Assign a name for this SmartApp (optional)", required: false
        input name: "disableUpdateNotifications", title: "Don't check for new versions of the app", type: "bool", required: false
    }
}

def installed() {
    log.debug "Installed with settings: ${settings}"

    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"

    unsubscribe()
    unschedule()
    initialize()
}

def initialize() {
    subscribe(motionSensors, "motion.active", motionHandler)
    subscribe(contactSensors, "contact.open", contactHandler)
    subscribe(momentarySwitches, "momentary", momentaryHandler) // No events defined, so we use all events
    subscribe(accelerationSensors, "acceleration.active", accelerationHandler)
    subscribe(buttonSwitches, "button", buttonHandler) // Get all button attributes

    // Check for new versions of the code
    def random = new Random()
    Integer randomHour = random.nextInt(18-10) + 10
    Integer randomDayOfWeek = random.nextInt(7-1) + 1 // 1 to 7
    schedule("0 0 " + randomHour + " ? * " + randomDayOfWeek, checkForCodeUpdate) // Check for code updates once a week at a random day and time between 10am and 6pm
}

def accelerationHandler(evt) {
    log.debug "Acceleration detected, activating cameras"
    takeAction(evt)
}

def motionHandler(evt) {
    log.debug "Active motion detected, activating cameras"
    takeAction(evt)
}

def contactHandler(evt) {
    log.debug "Open door detected, activating cameras"
    takeAction(evt)
}

def momentaryHandler(evt) {
    log.debug "Momentary push detected, activating cameras"
    takeAction(evt)
}

def buttonHandler(evt) {
    log.debug "Button push detected, activating cameras"
    takeAction(evt)
}

private takeAction(evt) {
    for(camera in cameras) {
        log.info "$evt.displayName detected $evt.value, activating camera $camera to take pictures"
        camera.take()
        try {
            if (cameraMonitoring) {
                log.info "Turning on camera monitoring for camera $camera"
                camera.on()
            }
        } catch (all) {
            log.error "Camera $camera does not support motion monitoring"
        }
    }

    for(switchon in switches) {
        log.info "$evt.displayName detected $evt.value, turning on switch $switchon"
        switchon.on()
    }

    (1..((burstCount ?: 3) - 1)).each {
        for(camera in cameras) { // Do this in the end because it causes a delay
            log.info "Taking burst picture $it with camera $camera"
            camera.take(delay: (500 * it))
        }
    }

    def distressMsg = "$evt.displayName detected $evt.value"
    sendMessageNotification(distressMsg)
}

private sendMessageNotification(message) {
    // Send notifications
    if (!message) {
        log.warn "No message to send, skipping notifications"
        return
    }
    
    if (location.contactBookEnabled) {
        log.debug "Sending message to $recipients"
        sendNotificationToContacts(message, recipients)
    } else {
        log.debug "SMS: $sms, Push: $push"
        sms ? sendText(sms, message) : ""
        push ? sendPush(message) : sendNotificationEvent(message)
    }
}

private void sendText(number, message) {
    if (number) {
        def phones = number.split("\\*")
        for (phone in phones) {
            sendSms(phone, message)
        }
    }
}

def checkForCodeUpdate(evt) {
    log.trace "Getting latest version data from the RBoy Apps server"
    
    def appName = "Trigger based Camera Pictures and Actions"
    def serverUrl = "http://smartthings.rboyapps.com"
    def serverPath = "/CodeVersions.json"
    
    try {
        httpGet([
            uri: serverUrl,
            path: serverPath
        ]) { ret ->
            log.trace "Received response from RBoy Apps Server, headers=${ret.headers.'Content-Type'}, status=$ret.status"
            //ret.headers.each {
            //    log.trace "${it.name} : ${it.value}"
            //}

            if (ret.data) {
                log.trace "Response>" + ret.data
                
                // Check for app version updates
                def appVersion = ret.data?."$appName"
                if (appVersion > clientVersion()) {
                    def msg = "New version of app ${app.label} available: $appVersion, current version: ${clientVersion()}.\nPlease visit $serverUrl to get the latest version."
                    log.info msg
                    if (!disableUpdateNotifications) {
                        sendPush(msg)
                    }
                } else {
                    log.trace "No new app version found, latest version: $appVersion"
                }
                
                // Check device handler version updates
                def caps = [ motionSensors, contactSensors, momentarySwitches, buttonSwitches, accelerationSensors, cameras, switches ]
                caps?.each {
                    def devices = it?.findAll { it.hasAttribute("codeVersion") }
                    for (device in devices) {
                        if (device) {
                            def deviceName = device?.currentValue("dhName")
                            def deviceVersion = ret.data?."$deviceName"
                            if (deviceVersion && (deviceVersion > device?.currentValue("codeVersion"))) {
                                def msg = "New version of device ${device?.displayName} available: $deviceVersion, current version: ${device?.currentValue("codeVersion")}.\nPlease visit $serverUrl to get the latest version."
                                log.info msg
                                if (!disableUpdateNotifications) {
                                    sendPush(msg)
                                }
                            } else {
                                log.trace "No new device version found for $deviceName, latest version: $deviceVersion, current version: ${device?.currentValue("codeVersion")}"
                            }
                        }
                    }
                }
            } else {
                log.error "No response to query"
            }
        }
    } catch (e) {
        log.error "Exception while querying latest app version: $e"
    }
}